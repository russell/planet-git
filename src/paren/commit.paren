;;; -*- Mode: LISP; Syntax: COMMON-LISP; -*-

;; Planet-Git a source code repository manager.
;; Copyright (C) 2011-2012 Russell Sim <russell.sim@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(in-package #:planet-git.ps)

(defun get-commits (user repository branch &optional from-reference success-fn)
  "Callback to the planet and retrieve commits for a repository."
  (let ((url (concat "/" user "/" repository "/branch/" branch "/"
                          (if from-reference
                              (concat "?ref=" from-reference)
                              ""))))
  (ajax url :headers (create :accept "application/json")
            :dataType "json"
            :success success-fn)))

(defun commit-template (commit)
  "Take a commit object and return HTML representation"
    (ps:who-ps-html
     (:li
      (:img :src (ps:getprop commit :icon) :size 40)
      (:p (ps:getprop commit :message))
      (:span :class "author" (ps:getprop commit :name))
      (:span :class "date" (ps:getprop commit :time)))))

(defun add-commits-to (selector)
  (lambda (data text-status xml-http-request)
    (let ((commit-list ($ selector)))
    (dolist (commit data)
      (chain commit-list (append (commit-template commit)))))))
